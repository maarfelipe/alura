|---------- CRIANDO UM NOVO AMBIENTE ----------|

1 - virtualenv venv para criar o ambiente virtual
2 - /venv/Scripts/activate.bat para acessar o ambiente virtual
3 - pip install django
4 - pip freeze > requirements.txt para criar um arquivo com todas as dependências do projeto
    (passo importante a ser realizado toda vez que for instalado um novo pacote no ambiente virtual
5 - django-admin startproject setup .
    (django-admin startproject é o comando interno do django para iniciar um novo projeto
    setup será o nome da pasta principal do projeto
    o . indica que a pasta setup ficará no root do diretório, não criando uma pasta e colocando-o dentro)

|------------- INICIANDO O PROJETO ------------|

1 - python manage.py runserver
2 - alterar o timezone e o idioma em settings.py

|----- PREPARANDO O PROJETO PARA VERSIONAR ----|

1 - pip install python-dotenv
2 - criar um arquivo na pasta root chamado .env onde serão colocadas as varíáveis de ambiente
3 - copiar a linha toda da SECRET_KEY do arquivo settings.py para o arquivo .env
4 - remover as aspas da string no arquivo .env
5 - apagar o conteúdo da variável SECRET_KEY no arquivo settings.py
6 - importar os, e from dotenv import load_dotenv no arquivo settings.py
7 - chamar load_dotenv() abaixo da importação
8 - SECRET_KEY = str(os.getenv('SECRET_KEY')) no arquivo settings.py
    (o comando busca no arquivo .env o conteúdo da variável SECRET_KEY)
9 - acessar https://gitignore.io/, buscar por django e colar o conteúdo da pesquisa no arquivo gitignore

|------------- CRIANDO UM NOVO APP ------------|

1 - python manage.py startapp receita
    (receita é o nome do app escolhido)
2 - todos os novos apps devem ser inseridos em INSTALLED_APPS no arquivo settings.py

|---------------- VIEWS E URLs ----------------|

1 - criar funções específicas para mostrar as informações em views.py
2 - as rotas são definidas no arquivo urls.py do projeto
3 - BOA PRÁTICA: isolar as URLs de cada app num arquivo urls.py dentro de cada app e importá-lo no urls.py do projeto

|---------- INSERINDO CÓDIGOS FRONT -----------|

1 - criar uma pasta templates na root do projeto
2 - dentro de TEMPLATES/DIRS no arquivo settings.py informar a pasta templates criada
    'DIRS': [os.path.join(BASE_DIR, 'templates')],

|------ CARREGANDO OS ARQUIVOS ESTATICOS ------|

1 - criar uma pasta chamada static na pasta do projeto e colocar todos os arquivos estáticos dentro dela
2 - no arquivo settings.py, abaixo de STATIC_URL = 'static/' adicionar:
    indicando onde os arquivos estáticos estão:
        STATICFILES_DIRS = [
            os.path.join(BASE_DIR, 'setup/static')
        ]
    o caminho absoluto pro diretório onde o python vai coletar os arquivos para fazer a implantação
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
3 - python manage.py collectstatic
    comando que coleta os arquivos na pasta static do projeto e cria a pasta static no root
4 - no arquivos de front que contém arquivos estáticos colocar os seguintes comandos:
    {% load static %} -> no início do arquivo
    "{% static 'caminho_absolutdo_do_arquivo_estático' %}"

|------------------ URL NAME ------------------|

1 - no arquivo urls.py do app que deseja criar a conexão, atribuir um nome ao path
2 - no arquivo .html criar a rota na tag href da seguinte forma:
    {% url 'nome_utilizado_no_path' %}

|--------------------- DRY --------------------|

1 - retirar as partes duplicadas dos códigos .html e inserir em um arquivo externo. ex: base.html
2 - {% extends 'caminho_do_arquivo_dry.html' %} deve ser colocado no início do arquivo .html que teve o conteúdo removido
3 - nas pages originais utilizar {% block content %} para marcar início do bloco e {% endblock %} ao fim
4 - no arquivo DRY utilizar {% block content %} {% endblock %} para especificar o local onde haverá conteúdo da outra page

|------------------ PARTIALS ------------------|

1 - criar uma pasta partials dentro de templates
2 - os arquivos por convenção devem ser nomeados _assim.html
3 - buscar nos arquivos .html as partes iguais, recortar e colocar no arquivo partial. ex: <footer>
4 - no local onde deve aparecer o conteúdo da partial incluir o código da seguinte forma:
    {% include 'galeria/partials/_exemplo.html' %}

|--------------- CONECTANDO DB ----------------|

1 - neste modelo usaremos o postgre:
    pip install psycopg2
    pip install psycopg2-binary
2 - alterar no arquivo settings.py as configurações para o postgre
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'alura_receita',
            'USER': 'postgres',
            'PASSWORD': 'y59*m3Ap',
            'HOST': 'localhost'
        }
    }

|--------------- CRIANDO MODELS ---------------|

1 - criar classes das tabelas com as respectivas colunas utilizando o models
2 - após criar o padrão da tabela, utilizar os comandos django para enviar a tabela ao DB:
    python manage.py makemigrations
    python manage.py migrate
3 - registrar o modelo no arquivo admin.py (a tabela deverá aparecer no admin do site após este processo)
4 - a class ExibirReceita foi criado para que o nome da receita seja exibido ao invés de 'receita object(1)' no admin do site

|----------------- SUPER USER -----------------|

1 - python manage.py createsuperuser

|----------- EXIBINDO DADOS NA PAGE -----------|

1 - no arquivo views.py configurar nas funções o que deseja exibir
2 - atribuir cada valor que deve ser exibido nos arquivos .html
